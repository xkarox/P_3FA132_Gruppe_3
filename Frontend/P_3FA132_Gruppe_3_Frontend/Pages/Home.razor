@page "/"

@using P_3FA132_Gruppe_3_Frontend.Data.Services
@using P_3FA132_Gruppe_3_Frontend.Data.Models.Classes
@using P_3FA132_Gruppe_3_Frontend.Pages.Components
@inject DatabaseService DatabaseService
@inject CustomerService CustomerService
@inject ReadingService ReadingService
<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<button @onclick="SetupDatabase">Delete Data</button>
<button @onclick="AddCustomer">Add Customer</button>
<button @onclick="AddReading">Add Reading</button>
<button @onclick="GetCustomer">Get Customer</button>
<button @onclick="GetReading">Get Reading</button>
<button @onclick="UpdateReading">UpdateReading</button>
<button @onclick="GetAllCustomers">GetAllCustomers</button>

@if (!string.IsNullOrEmpty(message))
{
    <p>@message</p>
}


@code {
    private string message;
    private Guid customerId;
    private string jsonString = @"{
        ""reading"": {
            ""id"": ""b8704102-48b1-4053-9efd-ec6f10f09af9"",
            ""comment"": null,
            ""customerId"": null,
            ""customer"": {
                ""id"": ""40f13c73-56a5-4aee-88d1-1833d704986f"",
                ""firstName"": ""Max"",
                ""lastName"": ""Mustermann"",
                ""birthDate"": null,
                ""gender"": ""M""
            },
            ""dateOfReading"": ""2024-12-16"",
            ""kindOfMeter"": ""STROM"",
            ""meterCount"": 100.0,
            ""meterId"": ""hallo"",
            ""substitute"": true
        }
    }";

    private async Task SetupDatabase()
    {
        try
        {
            var res = await DatabaseService.SetupDatabase();
            message = res.ToString();
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
        }
    }

    private async Task AddCustomer()
    {
        try
        {
            Customer customer = new Customer() { FirstName = "Max", LastName = "Mustermann", Gender = Data.Models.Gender.M };
            var res = await CustomerService.Add(customer);
            message = res.ToString();
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
        }
    }

    private async Task AddReading()
    {
        try
        {
            Customer customer = new Customer() { FirstName = "Max", LastName = "Mustermann", Gender = Data.Models.Gender.M };
            var result = await CustomerService.Add(customer);

            Reading reading = new Reading() { Customer = result, DateOfReading = DateOnly.FromDateTime(DateTime.Now), MeterId = "hallo", Substitute = true, MeterCount = 100.0, KindOfMeter = Data.Models.KindOfMeter.STROM };
            var res = await ReadingService.Add(reading);
            message = res.ToString();
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
        }
    }


    private async Task GetCustomer()
    {
        try
        {
            Customer customer = new Customer() { FirstName = "Max", LastName = "Mustermann", Gender = Data.Models.Gender.M };
            var res = await CustomerService.Add(customer);

            var resGet = await CustomerService.Get(res.Id);
            message = resGet.ToString();
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
        }
    }   

    private async Task GetReading()
    {
        try
        {
            Customer customer = new Customer() { FirstName = "Max", LastName = "Mustermann", Gender = Data.Models.Gender.M };
            var result = await CustomerService.Add(customer);

            Reading reading = new Reading() { Customer = result, DateOfReading = DateOnly.FromDateTime(DateTime.Now), MeterId = "hallo", Substitute = true, MeterCount = 100.0, KindOfMeter = Data.Models.KindOfMeter.STROM };
            var res = await ReadingService.Add(reading);

            var resGet = await ReadingService.Get(res.Id);
            message = resGet.ToString();
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
        }
    }

    private async Task UpdateReading()
    {
        Customer customer = new Customer() { FirstName = "Max", LastName = "Mustermann", Gender = Data.Models.Gender.M };
        var result = await CustomerService.Add(customer);

        Reading reading = new Reading() { Customer = result, DateOfReading = DateOnly.FromDateTime(DateTime.Now), MeterId = "hallo", Substitute = true, MeterCount = 100.0, KindOfMeter = Data.Models.KindOfMeter.STROM };
        var res = await ReadingService.Add(reading);

        res.MeterId = "Moin";
        var resUpdate = await ReadingService.Update(res);
        message = resUpdate.MeterId;
    }

    private async Task GetAllCustomers()
    {
        List<Customer> res = (List<Customer>)await CustomerService.GetAll();
        message = res.Count.ToString();
    }
}
