@page "/ExportView"
@inherits Blazing.Mvvm.Components.MvvmOwningComponentBase<P_3FA132_Gruppe_3_Frontend.Data.ViewModels.ExportViewModel>

<h3>ExportView</h3>

<div class="buttons">
    <div class="button-row">
        <button class="btn @(ViewModel.ButtonSelected == 'R' ? "selected" : "")" @onclick="() => ViewModel.SelectedButtonCommand.ExecuteAsync('R')">Reading</button>
        <button class="btn @(ViewModel.ButtonSelected == 'C' ? "selected" : "")" @onclick="() => ViewModel.SelectedButtonCommand.ExecuteAsync('C')">Customer</button>
    </div>
    @if (ViewModel.ButtonSelected.Equals('R'))
    {
        <div class="button-row">
            <button class="btn @(ViewModel.KindOfMeterSelected == 'S' ? "selected" : "")" @onclick="() => ViewModel.SelectKindOfMeterCommand.ExecuteAsync('S')">Strom</button>
            <button class="btn @(ViewModel.KindOfMeterSelected == 'W' ? "selected" : "")" @onclick="() => ViewModel.SelectKindOfMeterCommand.ExecuteAsync('W')">Wasser</button>
            <button class="btn @(ViewModel.KindOfMeterSelected == 'H' ? "selected" : "")" @onclick="() => ViewModel.SelectKindOfMeterCommand.ExecuteAsync('H')">Heizung</button>
            <button class="btn @(ViewModel.KindOfMeterSelected == 'U' ? "selected" : "")" @onclick="() => ViewModel.SelectKindOfMeterCommand.ExecuteAsync('U')">Undefined</button>
        </div>
    }
    @if (ViewModel.ButtonSelected switch
             {
                 'C' => true,
                 'R' when new[] { 'S', 'W', 'H', 'U' }.Contains(ViewModel.KindOfMeterSelected) => true,
                 _ => false
             })
    {
        <div class="button-row">
            <button class="btn @(ViewModel.FormatSelected == 'X' ? "selected" : "")" @onclick="() => ViewModel.SelectFormatCommand.ExecuteAsync('X')">XML</button>
            <button class="btn @(ViewModel.FormatSelected == 'J' ? "selected" : "")" @onclick="() => ViewModel.SelectFormatCommand.ExecuteAsync('J')">Json</button>
            <button class="btn @(ViewModel.FormatSelected == 'C' ? "selected" : "")" @onclick="() => ViewModel.SelectFormatCommand.ExecuteAsync('C')">Csv</button>
        </div>
    }
    @if (ViewModel.ButtonSelected switch
             {
                 'C' when new[] { 'X', 'J', 'C' }.Contains(ViewModel.FormatSelected) => true,
                 'R' when new[] { 'S', 'W', 'H', 'U' }.Contains(ViewModel.KindOfMeterSelected) && new[] { 'X', 'J', 'C' }.Contains(ViewModel.FormatSelected) => true,
                 _ => false
             })
    {
        <div class="button-row">
            <button @onclick="ViewModel.ExportCommand.ExecuteAsync">Export</button>
        </div>
    }
</div>

@code {
    
}