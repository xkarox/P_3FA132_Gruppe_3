@using ChartJs.Blazor.BarChart
@using ChartJs.Blazor;
@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Common.Enums
@using P_3FA132_Gruppe_3_Frontend.Data.Models.Classes

<div class="usage-bar-widget chart">
    <Chart Config="_config"></Chart>
</div>

@code {
    [EditorRequired] [Parameter] public List<Reading> Items { get; set; }

    private BarConfig _config;
    private string[] monthLabels = new []
    {
        "January", "February", "March", "April", "May", "June",
        "July", "August", "September", "October", "November", "December"
    };

 
    protected override void OnInitialized()
    {
        _config = new BarConfig()
        {
            Options = new BarOptions()
            {
                Responsive = true,
                MaintainAspectRatio = false,
                Legend = new Legend
                {
                    // Position = Position.Right
                    Display = false,
                },
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Usage per Month"
                }
            },
        };
        
        var data = CalculateAverageUsagePerMonth();
        
        IDataset<double> dataset1 = new BarDataset<double>(data, horizontal: true)
        {
            Label = "My first dataset",
            BackgroundColor = "rgba(0, 0, 0, 0.0)",
            BorderColor = "rgba(245, 40, 145, 0.8)",
            BorderWidth = 1
        };

        foreach (var month in monthLabels)
        {
            _config.Data.Labels.Add(month);
        }
    }

    private IEnumerable<double> CalculateAverageUsagePerMonth()
    {
        var avgPerMonth = new double[12];
        for (var i = 0; i < 12; i++)
        {
            var i1 = i;
            var currentReadings = Items.Where(reading => reading.DateOfReading!.Value.Month == i1 + 1);
            var readingCount = currentReadings.Count();
            var sum = currentReadings.Sum(reading => reading.MeterCount);
            Console.WriteLine($"{sum} / {readingCount}");
            avgPerMonth[i] = sum / readingCount;
            
        }
        
        return avgPerMonth;
    }
}