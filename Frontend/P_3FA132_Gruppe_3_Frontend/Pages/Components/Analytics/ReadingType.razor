@using System.ComponentModel
@using System.Diagnostics.Metrics
@using P_3FA132_Gruppe_3_Frontend.Data.Enums
@using P_3FA132_Gruppe_3_Frontend.Data.Models
@using P_3FA132_Gruppe_3_Frontend.Data.Models.Classes
@using P_3FA132_Gruppe_3_Frontend.Data.Models.Classes.Analytics
@using P_3FA132_Gruppe_3_Frontend.Data.Models.Enums

<div class="reading-type-donut-widget chart">
    <Chart Config="_config"></Chart>
</div>

@code {
    [EditorRequired] [Parameter] public List<ReadingTypeData> Items { get; set; }

    private PieChartConfig _config;
    
    protected override void OnInitialized()
    {
        _config = new PieChartConfig()
        {
            Options = new PieOptions
            {
                Responsive = true,
                MaintainAspectRatio = false,
                Plugins = new Plugins()
                {
                    Title = new Title()
                    {
                        Text = "Total Readings per Type",
                        Display = true,
                    },
                }
            }
        };
        
        var random = new Random();
        var data = new List<decimal?>();
        var backgroundColors = new List<string>();
        
        foreach (var type in Enum.GetNames<KindOfMeter>())
        {
            _config.Data.Labels.Add(type);
            var item = Items.Where(i => i.Type == type.ToKindOfMeter()).ToArray()[0];
            data.Add(item.Value);
            backgroundColors.Add(MeterColor.GetByEnumValue(type.ToKindOfMeter()));
        }
        
        var dataset = new PieDataset()
        {
            Data = data,
            BackgroundColor = backgroundColors.ToList()
        };
        
        _config.Data.Datasets.Add(dataset);
    }

}