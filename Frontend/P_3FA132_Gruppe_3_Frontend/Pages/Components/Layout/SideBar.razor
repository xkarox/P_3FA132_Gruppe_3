@using P_3FA132_Gruppe_3_Frontend.Data.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject IJSRuntime JSRuntime
@inject UserAuthService UserAuthService

<nav class="sidebar">
    <SideBarItem Text="Dashboard" IconName="dashboard"  Href="/"/>
    <SideBarItem Text="Customer Management" IconName="customers"  Href="/CustomerManagementView"/>
    <SideBarItem Text="Reading Management" IconName="readings"  Href="/ReadingManagementView"/>
    <SideBarItem Text="Analytics" IconName="analytics"  Href="/AnalyticsView"/>
    <SideBarItem Text="Import/Export" IconName="Importexport"  Href="/ImportExportView"/>
    <AuthorizeView>
        <NotAuthorized>
            <SideBarItem Text="Login" IconName="login" OnClickFunc="@CallbackFunc"/>
        </NotAuthorized>
        <Authorized>
            <SideBarItem Text="Logout" IconName="logout" OnClickFunc="() => UserAuthService.Logout()"/>
        </Authorized>
    </AuthorizeView>
</nav>

<AuthComponent Show="@showComp" LoginCallback="UserAuthService.SendAuthenticateRequestAsync"/>

<style>
    .sidebar {
        width: 5.4rem;
        padding: 1rem;
        transition: width 0.3s ease-in-out;
        overflow: hidden;
    }
    
    .sidebar:hover {
        width: 15rem;
        transition: width 0.3s ease-in-out;
    }
</style>

<script>
    function initializeSidebar(dotNetHelper) {
        const sidebar = document.getElementsByClassName("sidebar")[0];
        sidebar.addEventListener('mouseenter', () => {
            dotNetHelper.invokeMethodAsync('SetHoverState', true);
        });
        sidebar.addEventListener('mouseleave', () => {
            dotNetHelper.invokeMethodAsync('SetHoverState', false);
        });
    }
</script>

@code {
    private ElementReference _sidebarElement;
    private bool _isHovered;
    private DotNetObjectReference<SideBar> _dotNetRef = null!;
    public bool showComp = false;

    [JSInvokable]
    public void SetHoverState(bool hoverState)
    {
        _isHovered = hoverState;
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dotNetRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("initializeSidebar", _dotNetRef);
        }
    }

    public async void Logout()
    {
        await UserAuthService.Logout();
        StateHasChanged();
    }

    public void Dispose()
    {
        _dotNetRef?.Dispose();
    }

    public Task CallbackFunc()
    {
        showComp = !showComp;
        return Task.CompletedTask;
    }
}