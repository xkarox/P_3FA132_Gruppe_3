<div class="overlay @(Show ? "visible" : "hidden")"></div>
<div class="@(Show ? "visible" : "hidden") auth-component">
    <h3>Login</h3>
    @if (LoginCallback == null)
    {
        <p class="error-message">@LoginCallbackNullMessage</p>
    }

    <label for="username-input">Username</label>
    <input id="username-input" @bind="Username" />

    <label for="password-input">Password</label>
    <input id="password-input" type="password" @bind="Password" />

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <p class="error-message">@ErrorMessage</p>
    }
    <button id="login-button" @onclick="HandleLogin">
        Login
    </button>

    <button id="close-button" @onclick="Close">
        X
    </button>
</div>

@code {
    private string Username { get; set; } = string.Empty;
    private string Password { get; set; } = string.Empty;
    private string ErrorMessage { get; set; } = string.Empty;
    private string LoginCallbackNullMessage { get; set; } = "No LoginCallback provided";

    [Parameter] public bool Show { get; set; } = false;
    [Parameter] public Func<Task>? OnSuccessfullLogin { get; set; }
    [Parameter] public Func<string, string, Task<bool>>? LoginCallback { get; set; }

    static class AuthErrorMessages
    {
        public const string InvalidUsername = "Please input a valid Username";
        public const string InvalidPassword = "Please input a valid Password";
        public const string LoginFailed = "Login Failed - Please check credentials";
    }

    private async Task HandleLogin()
    {
        if (string.IsNullOrEmpty(Username))
        {
            ErrorMessage = AuthErrorMessages.InvalidUsername;
            return;
        }
        if (string.IsNullOrEmpty(Password))
        {
            ErrorMessage = AuthErrorMessages.InvalidPassword;
            return;
        }

        if (LoginCallback == null)
            return;
        var loginResult = await LoginCallback(Username, Password);
        
        if (!loginResult)
            ErrorMessage = AuthErrorMessages.LoginFailed;

        OnSuccessfullLogin?.Invoke();
    }

    private Task Close()
    {
        Show = false;
        return Task.CompletedTask;
    }
}
